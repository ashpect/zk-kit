/**
 * @module @zk-kit/lazytower
 * @version 0.0.1
 * @file LazyTower implementation in TypeScript.
 * @copyright LCamel 2024
 * @license MIT
 * @see [Github]{@link https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/lazytower}
*/
var zkKitLazytower=function(e,n){"use strict";function t(e,n,...t){if(void 0===e)throw new TypeError(`Parameter '${n}' is not defined`);if(!t.includes(typeof e))throw new TypeError(`Parameter '${n}' is none of these types: ${t.join(", ")}`)}const r=(e,n,t)=>e.concat(Array(n-e.length).fill(t)),o=(e,n)=>r(e,n,BigInt(0)),i=(e,n,t)=>r(e,n,[]).map((e=>o(e,t))),s=(e,t)=>n.poseidon2([e,t]);return e.LazyTowerHashChainProofBuilder=function(e,n,r=s){t(e,"H","number"),t(n,"W","number"),t(r,"hash","function");const u=e=>e.reduce(r),h=[],f=[];function c(t,r){if(t===e)throw new Error("The tower is full.");t===h.length?(f.push([r]),h.push([r])):h[t].length<n?(f[t].push(r),h[t].push(r)):(f[t].push(r),c(t+1,u(h[t])),h[t]=[r])}return{add:function(e){t(e,"item","bigint"),c(0,e)},indexOf:function(e){return t(e,"item","bigint"),f[0].indexOf(e)},build:function(r){if(t(r,"idx","number"),0===h.length)throw new Error("The tower is empty.");if(r<0||r>=f[0].length)throw new Error(`Index out of range: ${r}`);const s=f[0][r];let c=h.map(u).reverse();const l=u(c);c=o(c,e);const g=h.reduce(((e,n,t)=>e|BigInt(n.length)<<BigInt(4*t)),BigInt(0)),[d,a,p]=function(t){const r=[];for(let s=0;;s+=1){const u=f[s].length-h[s].length,c=t-t%n;if(c===u)return[s,o(f[s].slice(c,c+h[s].length),n),i(r,e-1,n)];r.push(f[s].slice(c,c+n)),t=Math.floor(t/n)}}(r);return{levelLengths:g,digestOfDigests:l,topDownDigests:c,rootLv:d,rootLevel:a,childrens:p,item:s}}}},e}({},poseidonLite);
